---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '@layouts/BaseLayout.astro';
import Image from '@components/ui/images/Image.astro';
import { timeago } from '@support/time';
import { Settings } from '../../config';
import { SITE } from '@/config';

// Generar rutas estáticas para los posts
export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

// Extraer las props del post
const post = Astro.props;

// Renderizar el contenido y metadatos del post
const { Content, remarkPluginFrontmatter } = await post.render();

// Obtener categoría relacionada
const categorias = await getCollection('categorias');
const category = categorias.find((c) => c.slug === post.data.category) || null;

// Obtener tags y URL de la publicación
const tags = post.data.tags ?? [category?.slug ?? ''];
const URL = Astro.url.href;
const ogImage = post.data.banner;

---

<BaseLayout
  title={post.data.title}
  description={post.data.description}
  ogImage={ogImage}
  structuredData={{
    '@context': 'https://schema.org',
    '@type': 'NewsArticle',
    '@id': URL,
    url: URL,
    description: post.data.description,
    image: post.data.banner ? [post.data.banner] : [],
    headline: post.data.title,
    datePublished: post.data.pubDate,
    dateModified: post.data.pubDate,
    author: [
      {
        '@type': 'Person',
        name: SITE.author,
        url: SITE.url,
      },
    ],
  }}
>
  <section class="max-w-6xl px-4 pt-8 pb-12 mx-auto sm:px-6 lg:px-8 lg:pt-12">
    <div class="mt-4 shadow-none sm:shadow-sm sm:mt-0">
      <div class="max-w-6xl">
        <Image
          class="object-cover w-full rounded-tl-sm rounded-tr-sm"
          src={post.data.banner}
          alt={post.data.title}
          draggable="false"
          format="avif"
          loading="lazy"
          inferSize={true}
        />
      </div>
      <div class="px-0 py-6 sm:dark:bg-neutral-900/30 sm:bg-neutral-100 sm:px-6 md:px-10 lg:px-14">
        <header class="mb-10">
          <h1 class="block text-3xl font-bold tracking-tight text-balance text-neutral-800 dark:text-neutral-300 md:text-4xl lg:text-5xl">
            {post.data.title}
          </h1>
          <ol class="flex items-center mt-2 whitespace-nowrap">
            {category && (
              <li class="inline-flex items-center">
                <a
                  class="flex items-center text-sm text-orange-400 hover:text-orange-500 focus:outline-none focus:text-orange-500"
                  href={`/categorias/${category.slug}`}
                >
                  {category.data.title}
                </a>
                <svg
                  class="flex-shrink-0 mx-2 size-5 text-neutral-500 dark:text-neutral-600"
                  width="16"
                  height="16"
                  viewBox="0 0 16 16"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                  aria-hidden="true"
                >
                  <path
                    d="M6 13L10 3"
                    stroke="currentColor"
                    stroke-linecap="round"
                  ></path>
                </svg>
              </li>
            )}
            <li class="inline-flex items-center text-sm text-neutral-500 hover:text-neutral-600 focus:outline-none dark:text-neutral-500 dark:hover:text-neutral-400">
              {timeago(post.data.pubDate)}
            </li>
            <li class="inline-flex items-center text-sm text-neutral-500 hover:text-neutral-600 focus:outline-none dark:text-neutral-500 dark:hover:text-neutral-400">
              {remarkPluginFrontmatter.minutesRead} min read
            </li>
          </ol>
        </header>

        <article class="prose prose-blog sm:prose-lg dark:prose-invert max-w-none">
          <Content />
        </article>

        {Settings.Comment.enable && (
          <div class="my-10">
            <div id="remark42"></div>
            <script>
             (function() {
                const remarkWindow = window as any;
                remarkWindow.remark_config = {
                host: 'https://tdpblog.com.ar',
                site_id: 'tdpblog.com.ar',
                };
            })();   
            </script>
            <script
              src="https://tdpblog.com.ar/embed.js"
              data-site_id="tdpblog.com.ar"
              async
            ></script>
          </div>
        )}
      </div>
    </div>

    <div class="grid max-w-screen-lg mx-auto mt-10 md:mt-14 gap-y-5 sm:flex sm:items-center sm:justify-between sm:gap-y-0">
      <div class="flex flex-wrap gap-x-2 gap-y-1">
        {tags.map((tag) => (
          <span
            class="inline-flex items-center gap-x-1.5 rounded-lg bg-neutral-400/30 px-3 py-1.5 text-xs font-medium text-neutral-700 dark:bg-neutral-700/60 dark:text-neutral-300"
          >
            {tag}
          </span>
        ))}
      </div>
    </div>
  </section>
</BaseLayout>
